#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <conio.h>

void ToEnd(int *line, int num)
{
	for (int i = num; i < 4; i++)
	{
		line[i] = line[i + 1];
	}
	line[3] = 0;
}

void Merge(int *line)
{
	for (int i = 1; i < 4; i++)
	{
		if (line[i] == line[i - 1])
		{
			line[i - 1] += line[i];
			line[i] = 0;
		}
	}
}

void ClearZero(int *line)
{
	int count = 0, i = 0;
	while (i<4 - count)
	{
		if (line[i] == 0)
		{
			ToEnd(line, i);
			count++;
		}
		else
		{
			i++;
		}
	}
}

void PrintMap(int map[][4])
{
	system("cls");
	int i, j;
	printf("\n\n\n");
	for (i = 0; i < 4; i++)
	{
		printf("        ");
		for (j = 0; j < 4; j++)
		{
			switch (map[i][j])
			{
			case 0:printf("   .   ");
				break;
			case 2:printf("   2   ");
				break;
			case 4:printf("   4   ");
				break;
			case 8:printf("   8   ");
				break;
			case 16:printf("   16  ");
				break;
			case 32:printf("   32  ");
				break;
			case 64:printf("   64  ");
				break;
			case 128:printf("   128 ");
				break;
			case 256:printf("   256 ");
				break;
			case 512:printf("   512 ");
				break;
			case 1024:printf("  1024 ");
				break;
			case 2048:printf("  2048 ");
				break;
			}
		}
		printf("\n\n\n");
	}
}
//To be completed.
void Initialize(int map[][4])
{
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			map[i][j] = 0;
		}
	}
}
/*
int ReadKey()
{
	int ch = _getch();
	//when you press arrow in your keyboard, two values will be pushed into buffer
	//the first value is 224 or 0 then it is a arrow key.
	if (ch == 224 || ch == 0)
	{
		ch = _getch();
		switch (ch)
		{
		case 72: //Up
		{
			return 1;
		}
		break;
		case 80: //down
		{
			return 2;
		}
		break;
		case 75: //left
		{
			return 3;
		}
		break;
		case 77: //right
		{
			return 4;
		}
		break;
		default: return 0;
			break;
		}//end switch 
	}
	else
	{
		return 0;
	}
}
*/

int ReadKey()
{
	while (1)
	{
		int ch = getchar();
		//when you press arrow in your keyboard, two values will be pushed into buffer
		//the first value is 224 or 0 then it is a arrow key.
		if (ch == 'w')//up
		{
			setbuf(stdin, NULL);
			return 1;
		}
		else
		{
			if (ch == 'z')//down
			{
				setbuf(stdin, NULL);
				return 2;
			}
			else
			{
				if (ch == 'a')//left
				{
					setbuf(stdin, NULL);
					return 3;
				}
				else
				{
					if (ch == 's')//right
					{
						setbuf(stdin, NULL);
						return 4;
					}
					else
					{
						printf("-----Invalid Input!-----\n-----Please type again!-----\n");
						setbuf(stdin, NULL);
					}
				}
			}
		}
	}
}

int ActionUp(int map[][4])
{
	int cnt = 0;
	for (int i = 0; i < 4; i++)
	{
		int line[4];
		int tmpline[4];
		for (int j = 0; j < 4; j++)
		{
			line[j] = map[j][i];
		}
		for (int j = 0; j < 4; j++)
		{
			tmpline[j] = map[j][i];
		}
		ClearZero(line);
		Merge(line);
		ClearZero(line);
		if (tmpline[0] == line[0] && tmpline[1] == line[1] && tmpline[2] == line[2] && tmpline[3] == line[3])
		{
			cnt++;
		}
		for (int j = 0; j < 4; j++)
		{
			map[j][i] = line[j];
		}
	}
	if (cnt == 4)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

int ActionDown(int map[][4])
{
	int cnt = 0;
	for (int i = 0; i < 4; i++)
	{
		int line[4];
		int tmpline[4];
		for (int j = 0; j < 4; j++)
		{
			line[j] = map[3 - j][i];
		}
		for (int j = 0; j < 4; j++)
		{
			tmpline[j] = map[3 - j][i];
		}
		ClearZero(line);
		Merge(line);
		ClearZero(line);
		if (tmpline[0] == line[0] && tmpline[1] == line[1] && tmpline[2] == line[2] && tmpline[3] == line[3])
		{
			cnt++;
		}
		for (int j = 0; j < 4; j++)
		{
			map[3 - j][i] = line[j];
		}
	}
	if (cnt == 4)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

int ActionLeft(int map[][4])
{
	int cnt = 0;
	for (int i = 0; i < 4; i++)
	{
		int line[4];
		int tmpline[4];
		for (int j = 0; j < 4; j++)
		{
			line[j] = map[i][j];
		}
		for (int j = 0; j < 4; j++)
		{
			tmpline[j] = map[i][j];
		}
		ClearZero(line);
		Merge(line);
		ClearZero(line);
		if (tmpline[0] == line[0] && tmpline[1] == line[1] && tmpline[2] == line[2] && tmpline[3] == line[3])
		{
			cnt++;
		}
		for (int j = 0; j < 4; j++)
		{
			map[i][j] = line[j];
		}
	}
	if (cnt == 4)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

int ActionRight(int map[][4])
{
	int cnt = 0;
	for (int i = 0; i < 4; i++)
	{
		int line[4];
		int tmpline[4];
		for (int j = 0; j < 4; j++)
		{
			line[j] = map[i][3 - j];
		}
		for (int j = 0; j < 4; j++)
		{
			tmpline[j] = map[i][3 - j];
		}
		ClearZero(line);
		Merge(line);
		ClearZero(line);
		if (tmpline[0] == line[0] && tmpline[1] == line[1] && tmpline[2] == line[2] && tmpline[3] == line[3])
		{
			cnt++;
		}
		for (int j = 0; j < 4; j++)
		{
			map[i][3 - j] = line[j];
		}
	}
	if (cnt == 4)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

int CheckFull(int map[][4])
{
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			if (map[i][j] == 0)
			{
				return 0;
			}
		}
	}
	return 1;
}

int CheckLose(int map[][4])
{
	int tmpmap[4][4];
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			tmpmap[i][j] = map[i][j];
		}
	}
	if (CheckFull(tmpmap) == 1)
	{
		int tmp = ActionUp(tmpmap);
		if (tmp == 1)
		{
			for (int i = 0; i < 4; i++)
			{
				for (int j = 0; j < 4; j++)
				{
					tmpmap[i][j] = map[i][j];
				}
			}
			int tmp = ActionDown(tmpmap);
			if (tmp == 1)
			{
				for (int i = 0; i < 4; i++)
				{
					for (int j = 0; j < 4; j++)
					{
						tmpmap[i][j] = map[i][j];
					}
				}
				int tmp = ActionLeft(tmpmap);
				if (tmp == 1)
				{
					for (int i = 0; i < 4; i++)
					{
						for (int j = 0; j < 4; j++)
						{
							tmpmap[i][j] = map[i][j];
						}
					}
					int tmp = ActionRight(tmpmap);
					if (tmp == 1)
					{
						return 1;
					}
					else
					{
						return 0;
					}
				}
				else
				{
					return 0;
				}
			}
			else
			{
				return 0;
			}
		}
		else
		{
			return 0;
		}
	}
	else
	{
		return 0;
	}
}

int main()
{
	int map[4][4];
	int tmp;
	int flag = 0;
	srand((unsigned)time(NULL));;
	Initialize(map);
	while (1)
	{
		int i, j;
		while (1)
		{
			i = rand() % 4;
			j = rand() % 4;
			if (map[i][j] == 0)
			{
				map[i][j] = 2;
				break;
			}
		}
		PrintMap(map);
		if (CheckLose(map) == 1)
		{
			printf("	  -------You Lose-------\n");
			break;
		}
		while (1)
		{
			flag = 0;
			switch (ReadKey())
			{
			case 1://up

				tmp = ActionUp(map);
				if (tmp == 1)
				{
					printf("\n\nInvalid Input\n");
					flag = 1;
				}
				break;


			case 2://down


				tmp = ActionDown(map);
				if (tmp == 1)
				{
					printf("\n\nInvalid Input\n");
					flag = 1;
				}
				break;


			case 3://left


				tmp = ActionLeft(map);
				if (tmp == 1)
				{
					printf("\n\nInvalid Input\n");
					flag = 1;
				}
				break;


			case 4://right


				tmp = ActionRight(map);
				if (tmp == 1)
				{
					printf("\n\nInvalid Input\n");
					flag = 1;
				}
				break;


			default:
				break;
			}
			if (flag == 1)
			{
				continue;
			}
			else
			{
				break;
			}
		}
	}
	return 0;
}
