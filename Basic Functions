#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <conio.h>

void ToEnd(int *line, int num)
{
	for (int i = num; i < 4; i++)
	{
		line[i] = line[i + 1];
	}
	line[3] = 0;
}

int Merge(int *line)
{
	int count = 0;
	for (int i = 1; i < 4; i++)
	{
		if (line[i] == line[i - 1])
		{
			line[i - 1] += line[i];
			line[i] = 0;
			count++;
		}
	}
	return count;
}

int ClearZero(int *line)
{
	int count = 0, i = 0;
	while (i<4 - count)
	{
		if (line[i] == 0)
		{
			ToEnd(line, i);
			count++;
		}
		else
		{
			i++;
		}
	}
	return count;
}

//include <time.h> & <stdlib.h>
int RandCoor()
{
	srand((unsigned)time(NULL));
	return rand() % 4;
}

int RandGameNum()
{
	srand((unsigned)time(NULL));
	return (rand() % 2 + 1) * 2;
}

void PrintMap(int map[][4])
{
	system("cls");
	int i, j;
	printf("\n\n\n");
	for (i = 0; i < 4; i++)
	{
		printf("        ");
		for (j = 0; j < 4; j++)
		{
			switch (map[i][j])
			{
			case 0:printf("   .   ");
				break;
			case 2:printf("   2   ");
				break;
			case 4:printf("   4   ");
				break;
			case 8:printf("   8   ");
				break;
			case 16:printf("   16  ");
				break;
			case 32:printf("   32  ");
				break;
			case 64:printf("   64  ");
				break;
			case 128:printf("   128 ");
				break;
			case 256:printf("   256 ");
				break;
			case 512:printf("   512 ");
				break;
			case 1024:printf("  1024 ");
				break;
			case 2048:printf("  2048 ");
				break;
			}
		}
		printf("\n\n\n");
	}
}
//To be completed.
void Initialize(int map[][4])
{
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			map[i][j] = 0;
		}
	}
	int cnt = 0;
	while (cnt<2)
	{
		int x = RandCoor();
		int y = RandCoor();
		if (map[x][y]==0)
		{
			map[x][y] = RandGameNum();
			cnt++;
		}
	}
	PrintMap(map);
}

int ReadKey()
{
	int ch = _getch();
	//when you press arrow in your keyboard, two values will be pushed into buffer
	//the first value is 224 or 0 then it is a arrow key.
	if (ch == 224 || ch == 0)
	{
		ch = _getch();
		switch (ch)
		{
		case 72: //Up
		{
			return 1;
		}
		break;
		case 80: //down
		{
			return 2;
		}
		break;
		case 75: //left
		{
			return 3;
		}
		break;
		case 77: //right
		{
			return 4;
		}
		break;
		default: return 0;
			break;
		}//end switch 
	}
	else
	{
		return 0;
	}
}

void ActionUp(int map[][4])
{
	for (int i = 0; i < 4; i++)
	{
		int line[4];
		for (int j = 0; j < 4; j++)
		{
			line[j] = map[j][i];
		}
		ClearZero(line);
		Merge(line);
		ClearZero(line);
		for (int j = 0; j < 4; j++)
		{
			map[j][i]=line[j];
		}
	}
}

void ActionDown(int map[][4])
{
	for (int i = 0; i < 4; i++)
	{
		int line[4];
		for (int j = 0; j < 4; j++)
		{
			line[j] = map[3-j][i];
		}
		ClearZero(line);
		Merge(line);
		ClearZero(line);
		for (int j = 0; j < 4; j++)
		{
			map[3 - j][i]=line[j];
		}
	}
}

void ActionLeft(int map[][4])
{
	for (int i = 0; i < 4; i++)
	{
		int line[4];
		for (int j = 0; j < 4; j++)
		{
			line[j] = map[i][j];
		}
		ClearZero(line);
		Merge(line);
		ClearZero(line);
		for (int j = 0; j < 4; j++)
		{
			map[i][j] = line[j];
		}
	}
}

void ActionRight(int map[][4])
{
	for (int i = 0; i < 4; i++)
	{
		int line[4];
		for (int j = 0; j < 4; j++)
		{
			line[j] = map[i][3-j];
		}
		ClearZero(line);
		Merge(line);
		ClearZero(line);
		for (int j = 0; j < 4; j++)
		{
			map[i][3 - j] = line[j];
		}
	}
}

int main()
{
	int map[4][4];
	Initialize(map);
	while (1)
	{
		switch (ReadKey())
		{
		case 1://up
			ActionUp(map);
			break;
		case 2://down
			ActionDown(map);
			break;
		case 3://left
			ActionLeft(map);
			break;
		case 4://right
			ActionRight(map);
		default:
			break;
		}
		while (1)
		{
			int x = RandCoor();
			int y = RandCoor();
			if (map[x][y] == 0)
			{
				map[x][y] = RandGameNum();
				break;
			}
		}
		PrintMap(map);
	}
	return 0;
}
